#! /usr/bin/env bash

# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.

# abt $START_THRESHOLD_VALUE $STOP_THRESHOLD_VALUE
#     $1                     $2

# Assign human-readable names to script arguments and target files

readonly START_THRESHOLD_VALUE=$1
readonly STOP_THRESHOLD_VALUE=$2

readonly START_THRESHOLD_FILE=/sys/class/power_supply/BAT0/charge_start_threshold
readonly STOP_THRESHOLD_FILE=/sys/class/power_supply/BAT0/charge_stop_threshold

container_check ()
{
    if [ -f /run/.containerenv ] || [ -f /.dockerenv ]
    then
        printf '%b' 'Found a container environment file.\n\nabt must be run outside of a container.\n'
        exit 1
    fi
}

container_check

# If there are insufficient arguments, print a help message and exit early
# The number of script arguments must be evaluated outside of a function

readonly NOT_ENOUGH_ARGS_MESSAGE='Not enough arguments.\n'
# shellcheck disable=SC2016
readonly USAGE_MESSAGE='abt $START_THRESHOLD_VALUE $STOP_THRESHOLD_VALUE\n'

if [ $# -ne 2 ]
    then
        printf '%b' "$NOT_ENOUGH_ARGS_MESSAGE\n$USAGE_MESSAGE"
        exit 1
fi

validate_arguments ()
{
    # Validate that arguments are between 0...99
    
    # POSIX Extended Regular Expressions (ERE) syntax is used
    # Matches strings such as '20 60', '5 90', and '3 8'
    local regex='^[0-9][0-9]\?[ ][0-9][0-9]\?$'
    local validation_failed_message='Arguments are not between 0...99.\n'

    if ! expr "$START_THRESHOLD_VALUE $STOP_THRESHOLD_VALUE" : "$regex" 1> /dev/null
    then
        printf '%b' "$validation_failed_message\n$USAGE_MESSAGE"
        exit 1
    fi

    # Test for mismatched start/stop values

    # shellcheck disable=SC2016
    local incompatible_values_message='$START_THRESHOLD_VALUE may not exceed (or be equal to) $STOP_THRESHOLD_VALUE.\n'
    if [ "$START_THRESHOLD_VALUE" -ge "$STOP_THRESHOLD_VALUE" ]
    then
        printf '%b' "$incompatible_values_message\n$USAGE_MESSAGE"
        exit 1
    fi
}

write_values ()
{
    echo "$START_THRESHOLD_VALUE" | sudo tee $START_THRESHOLD_FILE 1> /dev/null 2> /dev/null
    echo "$STOP_THRESHOLD_VALUE"  | sudo tee $STOP_THRESHOLD_FILE 1> /dev/null 2> /dev/null
}

read_values ()
{
    verify_threshold_message="The start threshold is now $(cat "$START_THRESHOLD_FILE").\nThe stop threshold is now $(cat "$STOP_THRESHOLD_FILE").\n"
    printf '%b' "$verify_threshold_message"
}

main ()
{
    validate_arguments

    while [ "$START_THRESHOLD_VALUE" != "$(cat $START_THRESHOLD_FILE)" ] || \
        [ "$STOP_THRESHOLD_VALUE" != "$(cat $STOP_THRESHOLD_FILE)" ]
    do
        write_values
    done

    read_values
}

main
